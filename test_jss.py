from __future__ import print_function

import ortools # learn more: https://python.org/pypi/ortools

# Import Python wrapper for or-tools constraint solver.
from ortools.constraint_solver import pywrapcp

def main():
  # Create the solver.
  solver = pywrapcp.Solver('jobshop')

  machines_count = 45
  jobs_count = 158
  all_machines = range(0, machines_count)
  all_jobs = range(0, jobs_count)
  # Define data.
  machines = [[0],
              [3],
              [4],
              [6],
              [5, 6],
              [6],
              [3],
              [3],
              [4],
              [6],
              [6],
              [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44],
              [7, 5, 17, 19],
              [3, 18, 19],
              [6, 8, 19],
              [6],
              [6],
              [6],
              [6],
              [17],
              [9, 19],
              [6, 18, 19],
              [20],
              [21],
              [20, 6],
              [6, 21, 33, 4, 43],
              [6, 19, 5],
              [6, 10, 22, 23, 3],
              [24, 34],
              [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44],
              [25],
              [35],
              [6, 38, 23],
              [6, 20, 19],
              [17, 36, 42, 26],
              [18],
              [1],
              [11, 23],
              [12, 23],
              [6, 13, 23],
              [6, 14, 23],
              [27, 4],
              [5],
              [28, 3],
              [37, 15, 6, 17, 4],
              [6, 16, 18, 4, 19],
              [6, 7, 29, 19, 3],
              [6],
              [8, 6, 38, 4, 23],
              [9, 38, 19],
              [39, 21, 40, 19],
              [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44],
              [30],
              [19],
              [6, 38, 5],
              [19, 3],
              [44, 33],
              [6, 10, 19, 20],
              [6, 19],
              [39, 6, 22],
              [11, 17, 35, 23],
              [39, 6, 22, 21, 40, 19],
              [6, 12, 20, 4, 19],
              [6, 21, 19],
              [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44],
              [19],
              [6, 13, 5],
              [6, 14, 3],
              [6, 15, 20, 40, 19],
              [36],
              [6, 16, 21, 4, 19],
              [20, 7, 6, 5],
              [3, 6],
              [31, 6, 21],
              [6, 32, 20],
              [24],
              [8, 6, 4, 21, 19],
              [6, 38, 9, 23, 5],
              [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44],
              [6, 20, 19],
              [6, 21],
              [6, 20],
              [6, 21],
              [6, 20],
              [6],
              [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44],
              [41, 6, 3],
              [6, 10, 19, 4, 34],
              [11, 19, 33],
              [25],
              [26],
              [6, 23],
              [6, 23],
              [6, 12, 27, 23],
              [13, 28, 37, 34, 43],
              [6, 14, 23, 21],
              [5],
              [6, 18, 15, 29, 23, 3],
              [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44],
              [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44],
              [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44],
              [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44],
              [6],
              [23],
              [23],
              [7, 30],
              [8, 31],
              [32],
              [17],
              [6, 18],
              [20, 6],
              [6, 21],
              [20, 6],
              [6, 21],
              [6],
              [6],
              [6, 20],
              [6, 20, 38],
              [6, 20, 38, 4],
              [23],
              [9],
              [39],
              [6],
              [6, 10],
              [6, 10, 17],
              [6, 10, 17, 23],
              [6, 10, 17, 23, 5],
              [2],
              [2, 6],
              [2, 6, 24],
              [2, 6, 24, 38],
              [2, 6, 24, 38, 23],
              [6],
              [6, 25],
              [6, 25, 3],
              [6, 25, 3, 21],
              [39],
              [39, 40],
              [38],
              [38, 11],
              [6],
              [6, 12],
              [6, 12, 20],
              [6],
              [6, 13],
              [6, 13, 21],
              [23],
              [14],
              [14, 6],
              [33],
              [6],
              [6, 15],
              [6, 15, 20],
              [6, 15, 20, 19],
              [6],
              [6, 16],
              [6, 16, 23],
              [23],
              [6],
              [6, 34],
              [6],
              [6, 34],
              [26],
              [26, 24],
              [6],
              [6, 24],
              [6, 24, 35],
              [6, 24, 35, 7]]




  processing_times = [[360],
                      [1146],
                      [837],
                      [180],
                      [329, 401],
                      [180],
                      [861],
                      [1155],
                      [648],
                      [180],
                      [150],
                      [360, 60, 60, 642, 653, 951, 409, 703, 330, 487, 231, 498, 210, 170, 477, 310, 248, 647, 204, 429, 373, 233, 78, 430, 534, 855, 855, 1283, 405, 210, 240, 105, 660, 1530, 671, 276, 98, 2188, 623, 341, 379, 681, 90, 119, 300, 300],
                      [120, 529, 186, 234],
                      [655, 240, 360],
                      [632, 720, 4327],
                      [30],
                      [414],
                      [177],
                      [504],
                      [2270],
                      [240, 203],
                      [418, 330, 289],
                      [75],
                      [75],
                      [1923, 3257],
                      [1685, 84, 598, 332, 300],
                      [27, 351, 485],
                      [51, 360, 102, 150, 659],
                      [360, 190],
                      [360, 60, 60, 642, 653, 951, 409, 703, 330, 487, 231, 498, 210, 170, 477, 310, 248, 647, 204, 429, 373, 233, 78, 430, 534, 855, 855, 1283, 405, 210, 240, 105, 660, 1530, 671, 276, 98, 2188, 623, 341, 379, 681, 90, 119, 300, 300],
                      [600],
                      [180],
                      [793, 584, 810],
                      [1148, 590, 360],
                      [1100, 48, 119, 240],
                      [240],
                      [60],
                      [360, 192],
                      [150, 120],
                      [218, 150, 120],
                      [173, 210, 120],
                      [570, 650],
                      [530],
                      [300, 531],
                      [480, 240, 720, 303, 1186],
                      [354, 240, 180, 360, 112],
                      [90, 30, 300, 120, 360],
                      [84],
                      [210, 435, 50, 1091, 360],
                      [300, 244, 309],
                      [48, 120, 119, 38],
                      [360, 60, 60, 642, 653, 951, 409, 703, 330, 487, 231, 498, 210, 170, 477, 310, 248, 647, 204, 429, 373, 233, 78, 430, 534, 855, 855, 1283, 405, 210, 240, 105, 660, 1530, 671, 276, 98, 2188, 623, 341, 379, 681, 90, 119, 300, 300],
                      [90],
                      [88],
                      [528, 300, 476],
                      [100, 288],
                      [300, 1065],
                      [1244, 480, 50, 120],
                      [182, 432],
                      [253, 167, 104],
                      [571, 506, 180, 360],
                      [196, 135, 27, 480, 1817, 348],
                      [186, 120, 78, 414, 396],
                      [216, 171, 279],
                      [360, 60, 60, 642, 653, 951, 409, 703, 330, 487, 231, 498, 210, 170, 477, 310, 248, 647, 204, 429, 373, 233, 78, 430, 534, 855, 855, 1283, 405, 210, 240, 105, 660, 1530, 671, 276, 98, 2188, 623, 341, 379, 681, 90, 119, 300, 300],
                      [191],
                      [372, 180, 465],
                      [166, 150, 300],
                      [173, 180, 150, 366, 129],
                      [4328],
                      [1222, 330, 247, 210, 165],
                      [1040, 330, 570, 3054],
                      [248, 190],
                      [240, 180, 555],
                      [254, 240, 239],
                      [3120],
                      [90, 288, 1686, 210, 333],
                      [501, 360, 390, 270, 1126],
                      [360, 60, 60, 642, 653, 951, 409, 703, 330, 487, 231, 498, 210, 170, 477, 310, 248, 647, 204, 429, 373, 233, 78, 430, 534, 855, 855, 1283, 405, 210, 240, 105, 660, 1530, 671, 276, 98, 2188, 623, 341, 379, 681, 90, 119, 300, 300],
                      [368, 248, 740],
                      [210, 390],
                      [167, 180],
                      [180, 600],
                      [165, 75],
                      [199],
                      [360, 60, 60, 642, 653, 951, 409, 703, 330, 487, 231, 498, 210, 170, 477, 310, 248, 647, 204, 429, 373, 233, 78, 430, 534, 855, 855, 1283, 405, 210, 240, 105, 660, 1530, 671, 276, 98, 2188, 623, 341, 379, 681, 90, 119, 300, 300],
                      [90, 120, 491],
                      [319, 300, 170, 283, 239],
                      [300, 743, 280],
                      [2235],
                      [690],
                      [232, 120],
                      [198, 90],
                      [224, 300, 240, 240],
                      [158, 120, 766, 436, 300],
                      [109, 287, 90, 90],
                      [2220],
                      [154, 90, 720, 180, 150, 924],
                      [360, 60, 60, 642, 653, 951, 409, 703, 330, 487, 231, 498, 210, 170, 477, 310, 248, 647, 204, 429, 373, 233, 78, 430, 534, 855, 855, 1283, 405, 210, 240, 105, 660, 1530, 671, 276, 98, 2188, 623, 341, 379, 681, 90, 119, 300, 300],
                      [360, 60, 60, 642, 653, 951, 409, 703, 330, 487, 231, 498, 210, 170, 477, 310, 248, 647, 204, 429, 373, 233, 78, 430, 534, 855, 855, 1283, 405, 210, 240, 105, 660, 1530, 671, 276, 98, 2188, 623, 341, 379, 681, 90, 119, 300, 300],
                      [360, 60, 60, 642, 653, 951, 409, 703, 330, 487, 231, 498, 210, 170, 477, 310, 248, 647, 204, 429, 373, 233, 78, 430, 534, 855, 855, 1283, 405, 210, 240, 105, 660, 1530, 671, 276, 98, 2188, 623, 341, 379, 681, 90, 119, 300, 300],
                      [360, 60, 60, 642, 653, 951, 409, 703, 330, 487, 231, 498, 210, 170, 477, 310, 248, 647, 204, 429, 373, 233, 78, 430, 534, 855, 855, 1283, 405, 210, 240, 105, 660, 1530, 671, 276, 98, 2188, 623, 341, 379, 681, 90, 119, 300, 300],
                      [288],
                      [570],
                      [810],
                      [60, 120],
                      [300, 1080],
                      [2820],
                      [176],
                      [564, 142],
                      [102, 57],
                      [390, 107],
                      [570, 96],
                      [177, 121],
                      [231],
                      [2065],
                      [2065, 480],
                      [2065, 480, 150],
                      [2065, 480, 150, 135],
                      [210],
                      [1016],
                      [896],
                      [85],
                      [85, 120],
                      [85, 120, 428],
                      [85, 120, 428, 510],
                      [85, 120, 428, 510, 300],
                      [60],
                      [60, 180],
                      [60, 180, 120],
                      [60, 180, 120, 819],
                      [60, 180, 120, 819, 150],
                      [446],
                      [446, 480],
                      [446, 480, 685],
                      [446, 480, 685, 191],
                      [440],
                      [440, 420],
                      [140],
                      [140, 762],
                      [112],
                      [112, 240],
                      [112, 240, 46],
                      [110],
                      [110, 180],
                      [110, 180, 54],
                      [900],
                      [870],
                      [870, 128],
                      [740],
                      [180],
                      [180, 240],
                      [180, 240, 102],
                      [180, 240, 102, 298],
                      [83],
                      [83, 210],
                      [83, 210, 150],
                      [2881],
                      [317],
                      [317, 33],
                      [788],
                      [788, 480],
                      [2100],
                      [2100, 390],
                      [600],
                      [600, 191],
                      [600, 191, 15],
                      [600, 191, 15, 2976],]

  # Computes horizon.
  horizon = 0
  for i in all_machines:
    horizon += sum(processing_times[i])
    # Creates jobs.
  all_tasks = {}
  for i in all_jobs:
    for j in range(0, len(machines[i])):
      all_tasks[(i, j)] = solver.FixedDurationIntervalVar(0,
                                                        horizon,
                                                        processing_times[i][j],
                                                        False,
                                                        '%i-%i' % (i, j))

  # Creates sequence variables and add disjuctive constraints.
  all_sequences = []
  all_machines_jobs = []
  for i in all_machines:

    machines_jobs = []
    for j in all_jobs:
      for k in range(0, len(machines[j])):
        if machines[j][k] == i:
          machines_jobs.append(all_tasks[(j, k)])
    disj = solver.DisjunctiveConstraint(machines_jobs, 'machine %i' % i)
    all_sequences.append(disj.SequenceVar())
    solver.Add(disj)

  # Add conjunctive contraints.
  for i in all_jobs:
    for j in range(0, len(machines[i]) - 1):
      solver.Add(all_tasks[(i, j + 1)].StartsAfterEnd(all_tasks[(i, j)]))

  # Set the objective.
  obj_var = solver.Max([all_tasks[(i, len(machines[i])-1)].EndExpr()
                        for i in all_jobs])
  objective_monitor = solver.Minimize(obj_var, 1)
  # Create search phases.
  sequence_phase = solver.Phase([all_sequences[i] for i in all_machines],
                                solver.SEQUENCE_DEFAULT)
  vars_phase = solver.Phase([obj_var],
                            solver.CHOOSE_FIRST_UNBOUND,
                            solver.ASSIGN_MIN_VALUE)
  main_phase = solver.Compose([sequence_phase, vars_phase])
  # Create the solution collector.
  collector = solver.LastSolutionCollector()

  # Add the interesting variables to the SolutionCollector.
  collector.Add(all_sequences)
  collector.AddObjective(obj_var)

  for i in all_machines:
    sequence = all_sequences[i];
    sequence_count = sequence.Size();
    for j in range(0, sequence_count):
      t = sequence.Interval(j)
      collector.Add(t.StartExpr().Var())
      collector.Add(t.EndExpr().Var())
  # Solve the problem.
  disp_col_width = 10

  if solver.Solve(main_phase, [objective_monitor, collector]):
    print("\nOptimal Schedule Length:", collector.ObjectiveValue(0), "\n")
    sol_line = ""
    sol_line_tasks = ""
    leah_line = ""
    print("Optimal Schedule", "\n")

    for i in all_machines:
      seq = all_sequences[i]
      sol_line += "Machine " + str(i) + " : "
      sol_line_tasks += "Machine " + str(i) + " : "
      sequence = collector.ForwardSequence(0, seq)
      seq_size = len(sequence)

      for j in range(0, seq_size):
        t = seq.Interval(sequence[j]);
         # Add spaces to output to align columns.
        sol_line_tasks +=  t.Name() + " " * (disp_col_width - len(t.Name()))
      

      for j in range(0, seq_size):
        t = seq.Interval(sequence[j]);
        sol_tmp = str(collector.Value(0, t.StartExpr().Var())) + "-"
        sol_tmp += str(collector.Value(0, t.EndExpr().Var()))
        # Add spaces to output to align columns.
        sol_line += sol_tmp + " " * (disp_col_width - len(sol_tmp))
      
      for j in range(0, seq_size):
        t = seq.Interval(sequence[j]);
        # Add spaces to output to align columns.
        leah_line += str(i) + " "
        leah_line +=  t.Name() + "-"
        
        sol_tmp = str(collector.Value(0, t.StartExpr().Var())) + "-"
        sol_tmp += str(collector.Value(0, t.EndExpr().Var()))
        # Add spaces to output to align columns.
        leah_line += sol_tmp + " " * (disp_col_width - len(sol_tmp))

        leah_line+= "\n"
      

      sol_line += "\n"
      sol_line_tasks += "\n"

    print(sol_line_tasks)
    print("Time Intervals for Tasks\n")
    print(sol_line)
    print(leah_line)


if __name__ == '__main__':
  main()
